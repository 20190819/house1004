// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: proto/captcha.proto

package captcha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CapRequest) Reset() {
	*x = CapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_captcha_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapRequest) ProtoMessage() {}

func (x *CapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_captcha_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapRequest.ProtoReflect.Descriptor instead.
func (*CapRequest) Descriptor() ([]byte, []int) {
	return file_proto_captcha_proto_rawDescGZIP(), []int{0}
}

type CapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgId string `protobuf:"bytes,1,opt,name=ImgId,proto3" json:"ImgId,omitempty"`
}

func (x *CapResponse) Reset() {
	*x = CapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_captcha_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapResponse) ProtoMessage() {}

func (x *CapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_captcha_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapResponse.ProtoReflect.Descriptor instead.
func (*CapResponse) Descriptor() ([]byte, []int) {
	return file_proto_captcha_proto_rawDescGZIP(), []int{1}
}

func (x *CapResponse) GetImgId() string {
	if x != nil {
		return x.ImgId
	}
	return ""
}

type ImgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ImgRequest) Reset() {
	*x = ImgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_captcha_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgRequest) ProtoMessage() {}

func (x *ImgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_captcha_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgRequest.ProtoReflect.Descriptor instead.
func (*ImgRequest) Descriptor() ([]byte, []int) {
	return file_proto_captcha_proto_rawDescGZIP(), []int{2}
}

func (x *ImgRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ImgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImgResponse) Reset() {
	*x = ImgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_captcha_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgResponse) ProtoMessage() {}

func (x *ImgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_captcha_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgResponse.ProtoReflect.Descriptor instead.
func (*ImgResponse) Descriptor() ([]byte, []int) {
	return file_proto_captcha_proto_rawDescGZIP(), []int{3}
}

func (x *ImgResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type VRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *VRequest) Reset() {
	*x = VRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_captcha_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRequest) ProtoMessage() {}

func (x *VRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_captcha_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRequest.ProtoReflect.Descriptor instead.
func (*VRequest) Descriptor() ([]byte, []int) {
	return file_proto_captcha_proto_rawDescGZIP(), []int{4}
}

func (x *VRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res bool `protobuf:"varint,1,opt,name=Res,proto3" json:"Res,omitempty"`
}

func (x *VResponse) Reset() {
	*x = VResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_captcha_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VResponse) ProtoMessage() {}

func (x *VResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_captcha_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VResponse.ProtoReflect.Descriptor instead.
func (*VResponse) Descriptor() ([]byte, []int) {
	return file_proto_captcha_proto_rawDescGZIP(), []int{5}
}

func (x *VResponse) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

var File_proto_captcha_proto protoreflect.FileDescriptor

var file_proto_captcha_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x22, 0x0c,
	0x0a, 0x0a, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x0b,
	0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6d, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x67, 0x49,
	0x64, 0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x21, 0x0a, 0x0b, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x30, 0x0a, 0x08, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x1d, 0x0a, 0x09, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x52, 0x65, 0x73, 0x32, 0xaa, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x03, 0x49, 0x6d, 0x67, 0x12, 0x13,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x49, 0x6d,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x2e, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x2e, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_captcha_proto_rawDescOnce sync.Once
	file_proto_captcha_proto_rawDescData = file_proto_captcha_proto_rawDesc
)

func file_proto_captcha_proto_rawDescGZIP() []byte {
	file_proto_captcha_proto_rawDescOnce.Do(func() {
		file_proto_captcha_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_captcha_proto_rawDescData)
	})
	return file_proto_captcha_proto_rawDescData
}

var file_proto_captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_captcha_proto_goTypes = []interface{}{
	(*CapRequest)(nil),  // 0: captcha.CapRequest
	(*CapResponse)(nil), // 1: captcha.CapResponse
	(*ImgRequest)(nil),  // 2: captcha.ImgRequest
	(*ImgResponse)(nil), // 3: captcha.ImgResponse
	(*VRequest)(nil),    // 4: captcha.VRequest
	(*VResponse)(nil),   // 5: captcha.VResponse
}
var file_proto_captcha_proto_depIdxs = []int32{
	0, // 0: captcha.GetCaptcha.Code:input_type -> captcha.CapRequest
	2, // 1: captcha.GetCaptcha.Img:input_type -> captcha.ImgRequest
	4, // 2: captcha.GetCaptcha.Validate:input_type -> captcha.VRequest
	1, // 3: captcha.GetCaptcha.Code:output_type -> captcha.CapResponse
	3, // 4: captcha.GetCaptcha.Img:output_type -> captcha.ImgResponse
	5, // 5: captcha.GetCaptcha.Validate:output_type -> captcha.VResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_captcha_proto_init() }
func file_proto_captcha_proto_init() {
	if File_proto_captcha_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_captcha_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_captcha_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_captcha_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_captcha_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_captcha_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_captcha_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_captcha_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_captcha_proto_goTypes,
		DependencyIndexes: file_proto_captcha_proto_depIdxs,
		MessageInfos:      file_proto_captcha_proto_msgTypes,
	}.Build()
	File_proto_captcha_proto = out.File
	file_proto_captcha_proto_rawDesc = nil
	file_proto_captcha_proto_goTypes = nil
	file_proto_captcha_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetCaptchaClient is the client API for GetCaptcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetCaptchaClient interface {
	Code(ctx context.Context, in *CapRequest, opts ...grpc.CallOption) (*CapResponse, error)
	Img(ctx context.Context, in *ImgRequest, opts ...grpc.CallOption) (*ImgResponse, error)
	Validate(ctx context.Context, in *VRequest, opts ...grpc.CallOption) (*VResponse, error)
}

type getCaptchaClient struct {
	cc grpc.ClientConnInterface
}

func NewGetCaptchaClient(cc grpc.ClientConnInterface) GetCaptchaClient {
	return &getCaptchaClient{cc}
}

func (c *getCaptchaClient) Code(ctx context.Context, in *CapRequest, opts ...grpc.CallOption) (*CapResponse, error) {
	out := new(CapResponse)
	err := c.cc.Invoke(ctx, "/captcha.GetCaptcha/Code", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getCaptchaClient) Img(ctx context.Context, in *ImgRequest, opts ...grpc.CallOption) (*ImgResponse, error) {
	out := new(ImgResponse)
	err := c.cc.Invoke(ctx, "/captcha.GetCaptcha/Img", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getCaptchaClient) Validate(ctx context.Context, in *VRequest, opts ...grpc.CallOption) (*VResponse, error) {
	out := new(VResponse)
	err := c.cc.Invoke(ctx, "/captcha.GetCaptcha/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetCaptchaServer is the server API for GetCaptcha service.
type GetCaptchaServer interface {
	Code(context.Context, *CapRequest) (*CapResponse, error)
	Img(context.Context, *ImgRequest) (*ImgResponse, error)
	Validate(context.Context, *VRequest) (*VResponse, error)
}

// UnimplementedGetCaptchaServer can be embedded to have forward compatible implementations.
type UnimplementedGetCaptchaServer struct {
}

func (*UnimplementedGetCaptchaServer) Code(context.Context, *CapRequest) (*CapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code not implemented")
}
func (*UnimplementedGetCaptchaServer) Img(context.Context, *ImgRequest) (*ImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Img not implemented")
}
func (*UnimplementedGetCaptchaServer) Validate(context.Context, *VRequest) (*VResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

func RegisterGetCaptchaServer(s *grpc.Server, srv GetCaptchaServer) {
	s.RegisterService(&_GetCaptcha_serviceDesc, srv)
}

func _GetCaptcha_Code_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetCaptchaServer).Code(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captcha.GetCaptcha/Code",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetCaptchaServer).Code(ctx, req.(*CapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetCaptcha_Img_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetCaptchaServer).Img(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captcha.GetCaptcha/Img",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetCaptchaServer).Img(ctx, req.(*ImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetCaptcha_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetCaptchaServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captcha.GetCaptcha/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetCaptchaServer).Validate(ctx, req.(*VRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetCaptcha_serviceDesc = grpc.ServiceDesc{
	ServiceName: "captcha.GetCaptcha",
	HandlerType: (*GetCaptchaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Code",
			Handler:    _GetCaptcha_Code_Handler,
		},
		{
			MethodName: "Img",
			Handler:    _GetCaptcha_Img_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _GetCaptcha_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/captcha.proto",
}
